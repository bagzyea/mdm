generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Device {
  id              String   @id @default(cuid())
  deviceId        String   @unique
  manufacturer    String
  model           String
  androidVersion  String
  sdkVersion      Int
  fingerprint     String   @unique
  status          DeviceStatus @default(ENROLLED)
  enrolledAt      DateTime @default(now())
  lastSeen        DateTime @default(now())
  location        Json?
  assignedTo      String?
  policies        Policy[]
  commands        RemoteCommand[]
  events          DeviceEvent[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Policy {
  id              String   @id @default(cuid())
  name            String
  description     String
  type            PolicyType
  rules           Json
  targetDevices   String[]
  priority        Int      @default(0)
  isActive        Boolean  @default(true)
  devices         Device[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model RemoteCommand {
  id              String   @id @default(cuid())
  deviceId        String
  command         String
  parameters      Json?
  status          CommandStatus @default(PENDING)
  result          Json?
  device          Device   @relation(fields: [deviceId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model DeviceEvent {
  id              String   @id @default(cuid())
  deviceId        String
  eventType       String
  eventData       Json?
  device          Device   @relation(fields: [deviceId], references: [id])
  createdAt       DateTime @default(now())
}

model User {
  id              String   @id @default(cuid())
  username        String   @unique
  email           String   @unique
  password        String
  firstName       String
  lastName        String
  role            UserRole @default(VIEWER)
  isActive        Boolean  @default(true)
  lastLogin       DateTime?
  refreshToken    String?
  resetToken      String?
  resetTokenExpiry DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  createdBy       String?
  
  // Audit trail
  auditLogs       AuditLog[]
  refreshTokens   RefreshToken[]
}

model AuditLog {
  id              String   @id @default(cuid())
  userId          String
  action          String
  resource        String
  resourceId      String?
  details         Json?
  ipAddress       String?
  userAgent       String?
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id])
  
  @@index([userId])
  @@index([resource])
  @@index([createdAt])
}

model RefreshToken {
  id              String   @id @default(cuid())
  token           String   @unique
  userId          String
  expiresAt       DateTime
  isRevoked       Boolean  @default(false)
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id])
  
  @@index([token])
  @@index([userId])
  @@index([expiresAt])
}

enum DeviceStatus {
  ENROLLED
  ACTIVE
  INACTIVE
  SUSPENDED
  WIPED
}

enum PolicyType {
  SECURITY
  NETWORK
  APPLICATION
  COMPLIANCE
}

enum CommandStatus {
  PENDING
  SENT
  EXECUTED
  FAILED
  CANCELLED
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  OPERATOR
  VIEWER
  DEVICE
}